[{"/Users/sharath/Documents/utd/internship/untitled folder/UTD-ToDo_List_App/todo-react/src/index.js":"1","/Users/sharath/Documents/utd/internship/untitled folder/UTD-ToDo_List_App/todo-react/src/App.js":"2","/Users/sharath/Documents/utd/internship/untitled folder/UTD-ToDo_List_App/todo-react/src/components/TodoListComponent.js":"3","/Users/sharath/Documents/utd/internship/untitled folder/UTD-ToDo_List_App/todo-react/src/components/ListTodo.js":"4"},{"size":221,"mtime":1642313669000,"results":"5","hashOfConfig":"6"},{"size":366,"mtime":1642389757000,"results":"7","hashOfConfig":"6"},{"size":5625,"mtime":1642449542455,"results":"8","hashOfConfig":"6"},{"size":3832,"mtime":1642381825000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h5rnl4",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sharath/Documents/utd/internship/untitled folder/UTD-ToDo_List_App/todo-react/src/index.js",[],"/Users/sharath/Documents/utd/internship/untitled folder/UTD-ToDo_List_App/todo-react/src/App.js",["19"],"/Users/sharath/Documents/utd/internship/untitled folder/UTD-ToDo_List_App/todo-react/src/components/TodoListComponent.js",["20","21"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { Button, Container, Segment, Header, Icon, Input, List, Divider } from 'semantic-ui-react';\n\nconst TodoListComponent = () => {\n\n    const [todos, setTodos] = useState([]);\n    const [description, setDescription] = useState(\"\");\n\n\n    useEffect(() => {\n        getTodos();\n    }, [todos]);\n\n    const getTodos = async () => {\n        try {\n\n            const response = await fetch(\"http://localhost:7210/all\");\n            const jsonData = await response.json();\n\n            setTodos(jsonData);\n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    const markAsDone = async (todo, flag) => {\n        todo.is_done = flag;\n\n        updateTodo(todo, false);\n    }\n\n    const updateTodo = async (todo, is_deleted) => {\n        try {\n            const body = {\n                \"description\": todo.description,\n                \"is_done\": todo.is_done,\n                \"is_deleted\": is_deleted\n            };\n            // console.log(body);\n            const response = await fetch(\"http://localhost:7210/update?id=\" + todo.id, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(body)\n            });\n\n            console.log(response);\n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n\n    const displayItem = (todo) => {\n        if (todo.is_done) {\n            return (\n                <List.Item>\n                    <List.Content floated='right'>\n                        <Button color='red' icon labelPosition='right' size='mini' onClick={() => markAsDone(todo, !todo.is_done)}>\n                            Undo\n                            <Icon name='minus square' />\n                        </Button>\n                        <Button color='black' basic icon size='mini' onClick={() => updateTodo(todo, true)}>\n                            <Icon name='times circle outline' />\n                        </Button>\n                    </List.Content>\n                    <List.Content>\n                        <Header as='h4' color='grey'>\n                            <strike>{todo.description}</strike>\n                        </Header>\n                    </List.Content>\n                </List.Item>\n            )\n        } else {\n            return (\n                <List.Item>\n                    <List.Content floated='right'>\n                        <Button color='green' icon labelPosition='right' size='mini' onClick={() => markAsDone(todo, !todo.is_done)}>\n                            Done\n                            <Icon name='check square' />\n                        </Button>\n                        <Button color='black' icon basic size='mini' onClick={() => updateTodo(todo, true)}>\n                            <Icon name='times circle outline' />\n                        </Button>\n                    </List.Content>\n                    <List.Content>\n                        <Header as='h4'>\n                            {todo.description}\n                        </Header>\n                    </List.Content>\n                </List.Item>\n            )\n        }\n    }\n\n    const onAdd = async e => {\n        try {\n            const body = { description };\n            console.log(body);\n            console.log(\"ddbncd\");\n            const response = await fetch(\"http://localhost:7210/create\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(body)\n               \n            });\n            setDescription(\"\");\n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    const displayAdd = () => {\n        if (description.length > 0) {\n            return (\n                <Button animated='fade' primary onClick={onAdd} size='huge'>\n                    <Button.Content visible>Add</Button.Content>\n                    <Button.Content hidden>\n                        <Icon name='check' />\n                    </Button.Content>\n                </Button>\n            )\n        } else {\n            return (\n                <Button disabled size='huge'>Add</Button>\n            )\n        }\n    }\n\n    return (\n        <Container textAlign='center'>\n            <Header as='h1' textAlign='center' style={{ 'marginTop': '1em' }}>\n                <Icon color='yellow' name='sticky note outline' />\n                <Header.Content>Todo App</Header.Content>\n            </Header>\n            <Segment style={{ 'marginTop': '2em' }} textAlign='center'>\n\n                <div>\n                    <Input transparent style={{ 'marginTop': '2em' }}\n                        placeholder='Type Something to Add..'\n                        size='massive'\n                        value={description} onChange={e => setDescription(e.target.value)} />\n                    {displayAdd()}\n                </div>\n\n\n                <div>\n                    <Header as='h3' textAlign='center' style={{ 'marginTop': '4em' }}>\n                        <Icon name='tasks' />\n                        <Header.Content>Here are the Todos to complete</Header.Content>\n                    </Header>\n                    <Divider />\n                </div>\n\n                <div>\n                    <List divided relaxed style={{ 'marginTop': '2em' }}>\n                        {todos.map(todo => (\n                            displayItem(todo)\n                        ))}\n\n                    </List>\n                </div>\n\n            </Segment>\n        </Container>\n    );\n}\n\nexport default TodoListComponent;","/Users/sharath/Documents/utd/internship/untitled folder/UTD-ToDo_List_App/todo-react/src/components/ListTodo.js",["22"],{"ruleId":"23","severity":1,"message":"24","line":5,"column":8,"nodeType":"25","messageId":"26","endLine":5,"endColumn":16},{"ruleId":"23","severity":1,"message":"27","line":1,"column":17,"nodeType":"25","messageId":"26","endLine":1,"endColumn":25},{"ruleId":"23","severity":1,"message":"28","line":100,"column":19,"nodeType":"25","messageId":"26","endLine":100,"endColumn":27},{"ruleId":"23","severity":1,"message":"28","line":70,"column":19,"nodeType":"25","messageId":"26","endLine":70,"endColumn":27},"no-unused-vars","'ListTodo' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'response' is assigned a value but never used."]